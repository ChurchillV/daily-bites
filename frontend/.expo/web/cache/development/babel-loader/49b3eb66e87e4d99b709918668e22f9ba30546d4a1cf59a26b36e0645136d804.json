{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"htmlProps\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport Box from \"../../primitives/Box\";\nimport { useFormControlProvider, FormControlContext } from \"./useFormControl\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar FormControl = function FormControl(props, ref) {\n  var _useFormControlProvid = useFormControlProvider(props),\n    htmlProps = _useFormControlProvid.htmlProps,\n    context = _objectWithoutProperties(_useFormControlProvid, _excluded);\n  var resolvedProps = usePropsResolution('FormControl', props, {\n    isDisabled: context.isDisabled,\n    isReadOnly: context.isReadOnly,\n    isInvalid: context.isInvalid\n  });\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(FormControlContext.Provider, {\n    value: context\n  }, React.createElement(Box, _extends({}, resolvedProps, htmlProps, {\n    ref: ref\n  })));\n};\nexport default memo(forwardRef(FormControl));","map":{"version":3,"names":["React","memo","forwardRef","usePropsResolution","Box","useFormControlProvider","FormControlContext","useHasResponsiveProps","FormControl","props","ref","_useFormControlProvid","htmlProps","context","_objectWithoutProperties","_excluded","resolvedProps","isDisabled","isReadOnly","isInvalid","createElement","Provider","value","_extends"],"sources":["C:\\Users\\vinch\\OneDrive\\Desktop\\daily_bites\\frontend\\node_modules\\native-base\\lib\\module\\components\\composites\\FormControl\\FormControl.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport type { IFormControlProps } from './types';\nimport { useFormControlProvider, FormControlContext } from './useFormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst FormControl = (props: IFormControlProps, ref: any) => {\n  const { htmlProps, ...context } = useFormControlProvider(props);\n  const resolvedProps = usePropsResolution('FormControl', props, {\n    isDisabled: context.isDisabled,\n    isReadOnly: context.isReadOnly,\n    isInvalid: context.isInvalid,\n    // isRequired: context.isRequired,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <FormControlContext.Provider value={context}>\n      <Box {...resolvedProps} {...htmlProps} ref={ref} />\n    </FormControlContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(FormControl));\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,kBAAT;AACA,OAAOC,GAAP;AAEA,SAASC,sBAAT,EAAiCC,kBAAjC;AACA,SAASC,qBAAT;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,KAAD,EAA2BC,GAA3B,EAAwC;EAC1D,IAAAC,qBAAA,GAAkCN,sBAAsB,CAACI,KAAD,CAAxD;IAAQG,SAAF,GAAAD,qBAAA,CAAEC,SAAF;IAAgBC,OAAA,GAAAC,wBAAA,CAAAH,qBAAA,EAAAI,SAAA;EACtB,IAAMC,aAAa,GAAGb,kBAAkB,CAAC,aAAD,EAAgBM,KAAhB,EAAuB;IAC7DQ,UAAU,EAAEJ,OAAO,CAACI,UADyC;IAE7DC,UAAU,EAAEL,OAAO,CAACK,UAFyC;IAG7DC,SAAS,EAAEN,OAAO,CAACM;EAH0C,CAAvB,CAAxC;EAOA,IAAIZ,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACET,KAAA,CAAAoB,aAAA,CAACd,kBAAD,CAAoBe,QAApB;IAA6BC,KAAK,EAAET;EAApC,GACEb,KAAA,CAAAoB,aAAA,CAAChB,GAAD,EAAAmB,QAAA,KAASP,aAAT,EAA4BJ,SAA5B;IAAuCF,GAAG,EAAEA;EAA5C,GADF,CADF;AAKD,CAjBD;AAmBA,eAAeT,IAAI,CAACC,UAAU,CAACM,WAAD,CAAX,CAAnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}