{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useControlledState as $bOkae$useControlledState } from \"@react-stately/utils\";\nfunction $3017fa7ffdddec74$export$8042c6c013fd5226() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var isReadOnly = props.isReadOnly;\n  var _ref = (0, $bOkae$useControlledState)(props.isSelected, props.defaultSelected || false, props.onChange),\n    _ref2 = _slicedToArray(_ref, 2),\n    isSelected = _ref2[0],\n    setSelected = _ref2[1];\n  function updateSelected(value) {\n    if (!isReadOnly) setSelected(value);\n  }\n  function toggleState() {\n    if (!isReadOnly) setSelected(!isSelected);\n  }\n  return {\n    isSelected: isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\nexport { $3017fa7ffdddec74$export$8042c6c013fd5226 as useToggleState };","map":{"version":3,"names":["$3017fa7ffdddec74$export$8042c6c013fd5226","props","arguments","length","undefined","isReadOnly","_ref","$bOkae$useControlledState","isSelected","defaultSelected","onChange","_ref2","_slicedToArray","setSelected","updateSelected","value","toggleState","toggle"],"sources":["C:\\Users\\vinch\\OneDrive\\Desktop\\daily_bites\\frontend\\node_modules\\@react-stately\\toggle\\dist\\packages\\@react-stately\\toggle\\src\\index.ts","C:\\Users\\vinch\\OneDrive\\Desktop\\daily_bites\\frontend\\node_modules\\@react-stately\\toggle\\dist\\packages\\@react-stately\\toggle\\src\\useToggleState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useToggleState} from './useToggleState';\n\nexport type {ToggleProps} from '@react-types/checkbox';\nexport type {ToggleState, ToggleStateOptions} from './useToggleState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ToggleProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ToggleStateOptions extends Omit<ToggleProps, 'children'> {}\n\nexport interface ToggleState {\n  /** Whether the toggle is selected. */\n  readonly isSelected: boolean,\n\n  /** Updates selection state. */\n  setSelected(isSelected: boolean): void,\n\n  /** Toggle the selection state. */\n  toggle(): void\n}\n\n/**\n * Provides state management for toggle components like checkboxes and switches.\n */\nexport function useToggleState(props: ToggleStateOptions = {}): ToggleState {\n  let {isReadOnly} = props;\n\n  // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, props.onChange);\n\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n    }\n  }\n\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(!isSelected);\n    }\n  }\n\n  return {\n    isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n"],"mappings":";;AC+BO,SAASA,0CAAA,EAA6C;EAAA,IAA9BC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,CAAC,CAAC;EAC3D,IAAKG,UAAA,GAAcJ,KAAA,CAAfI,UAAA;EAIJ,IAAAC,IAAA,GAAgC,IAAAC,yBAAiB,EAAEN,KAAA,CAAMO,UAAA,EAAYP,KAAA,CAAMQ,eAAA,IAAmB,OAAOR,KAAA,CAAMS,QAAA;IAAAC,KAAA,GAAAC,cAAA,CAAAN,IAAA;IAAtGE,UAAA,GAAAG,KAAA;IAAYE,WAAA,GAAAF,KAAA;EAEjB,SAASG,eAAeC,KAAK;IAC3B,IAAI,CAACV,UAAA,EACHQ,WAAA,CAAYE,KAAA;EAEhB;EAEA,SAASC,YAAA;IACP,IAAI,CAACX,UAAA,EACHQ,WAAA,CAAY,CAACL,UAAA;EAEjB;EAEA,OAAO;gBACLA,UAAA;IACAK,WAAA,EAAaC,cAAA;IACbG,MAAA,EAAQD;EACV;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}