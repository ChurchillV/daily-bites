{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { HybridContext } from \"./../hybrid-overlay/Context\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport _useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\nimport { useNativeBaseConfig } from \"../NativeBaseContext\";\nexport var useColorMode = function useColorMode() {\n  var _React$useContext = React.useContext(HybridContext),\n    colorModeContext = _React$useContext.colorMode;\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n    colorMode = _useColorMode.colorMode;\n  return colorMode === 'dark' ? dark : light;\n}\nexport var useAppState = function useAppState() {\n  var subscription = React.useMemo(function () {\n    return {\n      getCurrentValue: function getCurrentValue() {\n        return AppState.currentState;\n      },\n      subscribe: function subscribe(callback) {\n        var subsription = AppState.addEventListener('change', callback);\n        return function () {\n          if (AppState.removeEventListener) {\n            AppState.removeEventListener('change', callback);\n          } else {\n            subsription.remove();\n          }\n        };\n      }\n    };\n  }, []);\n  var isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    return useSyncExternalStore(subscription.subscribe, subscription.getCurrentValue, subscription.getCurrentValue);\n  }\n};\nexport var useColorScheme = function useColorScheme() {\n  var colorScheme = _useColorScheme();\n  var _useState = useState(colorScheme),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentScheme = _useState2[0],\n    setCurrentScheme = _useState2[1];\n  var appState = useAppState();\n  useEffect(function () {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n  return currentScheme;\n};\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = useColorScheme();\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n  var _useState3 = useState(initialColorMode),\n    _useState4 = _slicedToArray(_useState3, 2),\n    colorMode = _useState4[0],\n    setRawMode = _useState4[1];\n  var setColorMode = React.useCallback(function () {\n    var _ref = _asyncToGenerator(function* (val) {\n      if (colorModeManager) {\n        yield colorModeManager.set(val);\n      }\n      setRawMode(val);\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [colorModeManager]);\n  useEffect(function () {\n    if (colorModeManager) {\n      (function () {\n        var _getMode = _asyncToGenerator(function* () {\n          var value = yield colorModeManager.get(initialColorMode);\n          if (value && value !== colorMode) {\n            setRawMode(value);\n          }\n        });\n        function getMode() {\n          return _getMode.apply(this, arguments);\n        }\n        return getMode;\n      })()();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  useEffect(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  var _React$useContext2 = React.useContext(HybridContext),\n    colorModeContext = _React$useContext2.colorMode;\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"names":["React","useState","useEffect","HybridContext","AppState","_useColorScheme","useSyncExternalStore","useNativeBaseConfig","useColorMode","_React$useContext","useContext","colorModeContext","colorMode","undefined","Error","useColorModeValue","light","dark","_useColorMode","useAppState","subscription","useMemo","getCurrentValue","currentState","subscribe","callback","subsription","addEventListener","removeEventListener","remove","isSSR","useColorScheme","colorScheme","_useState","_useState2","_slicedToArray","currentScheme","setCurrentScheme","appState","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","_useState3","_useState4","setRawMode","setColorMode","useCallback","_ref","_asyncToGenerator","val","set","_x","apply","arguments","_getMode","value","get","getMode","useAccessibleColors","_React$useContext2","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["C:\\Users\\H P\\Desktop\\Daily Bite\\daily-bites\\frontend\\node_modules\\native-base\\lib\\module\\core\\color-mode\\hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nimport { useNativeBaseConfig } from '../NativeBaseContext';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport const useAppState = () => {\n  const subscription = React.useMemo(\n    () => ({\n      getCurrentValue: () => AppState.currentState,\n      subscribe: (callback: () => void) => {\n        const subsription = AppState.addEventListener('change', callback);\n        return () => {\n          if (AppState.removeEventListener) {\n            // React Native < 0.65\n            AppState.removeEventListener('change', callback);\n          } else {\n            // React Native >= 0.65\n            // @ts-ignore:next-line ignoring ts error as devDependency contains \"@types/react-native\" < 0.65\n            subsription.remove();\n          }\n        };\n      },\n    }),\n    []\n  );\n\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSyncExternalStore(\n      subscription.subscribe,\n      subscription.getCurrentValue,\n      subscription.getCurrentValue\n    );\n  }\n};\n\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n\n  return currentScheme;\n};\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        const value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}