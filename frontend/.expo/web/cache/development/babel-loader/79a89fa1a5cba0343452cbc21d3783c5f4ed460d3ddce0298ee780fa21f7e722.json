{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"fieldIndex\", \"defaultValue\"],\n  _excluded2 = [\"handleChange\", \"value\", \"setRefList\", \"defaultValue\", \"handleMultiValueChange\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { Input } from \"../../primitives/Input\";\nimport { PinInputContext } from \"./Context\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar PinInputFiled = function PinInputFiled(_ref, ref) {\n  var _ref$fieldIndex = _ref.fieldIndex,\n    fieldIndex = _ref$fieldIndex === void 0 ? 0 : _ref$fieldIndex,\n    pDefaultValue = _ref.defaultValue,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useContext = React.useContext(PinInputContext),\n    handleChange = _React$useContext.handleChange,\n    cValue = _React$useContext.value,\n    setRefList = _React$useContext.setRefList,\n    cDefaultValue = _React$useContext.defaultValue,\n    handleMultiValueChange = _React$useContext.handleMultiValueChange,\n    context = _objectWithoutProperties(_React$useContext, _excluded2);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  var defaultValue = pDefaultValue || cDefaultValue;\n  var value = cValue && cValue[fieldIndex];\n  var keyPressHandler = function keyPressHandler(event) {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  var textChangeHandler = function textChangeHandler(value) {\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  var myRef = React.useRef(null);\n  React.useEffect(function () {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Input, _extends({\n    ref: mergeRefs([myRef, ref])\n  }, context, props, {\n    onKeyPress: function onKeyPress(event) {\n      return keyPressHandler(event);\n    },\n    onChangeText: function onChangeText(value) {\n      return textChangeHandler(value);\n    },\n    keyboardType: \"numeric\",\n    defaultValue: defaultValue,\n    value: value\n  }));\n};\nexport default React.memo(React.forwardRef(PinInputFiled));","map":{"version":3,"names":["React","Input","PinInputContext","Platform","mergeRefs","useHasResponsiveProps","PinInputFiled","_ref","ref","_ref$fieldIndex","fieldIndex","pDefaultValue","defaultValue","props","_objectWithoutProperties","_excluded","_React$useContext","useContext","handleChange","cValue","value","setRefList","cDefaultValue","handleMultiValueChange","context","_excluded2","keyPressHandler","event","OS","nativeEvent","key","textChangeHandler","myRef","useRef","useEffect","createElement","_extends","onKeyPress","onChangeText","keyboardType","memo","forwardRef"],"sources":["C:\\Users\\H P\\Desktop\\Daily Bite\\daily-bites\\frontend\\node_modules\\native-base\\lib\\module\\components\\composites\\PinInput\\PinInputField.tsx"],"sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInputFiled = (\n  {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  }: IPinInputFieldProps,\n  ref?: any\n) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      //@ts-ignore\n      ref={mergeRefs([myRef, ref])}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={defaultValue}\n      value={value}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}