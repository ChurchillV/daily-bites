{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useMemo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { HybridContext } from \"./Context\";\nimport { useModeManager } from \"./../color-mode/hooks\";\nimport { keyboardDismissHandlerManager } from \"../../hooks\";\nvar HybridProvider = function HybridProvider(_ref) {\n  var children = _ref.children,\n    _ref$options = _ref.options,\n    _ref$options$initialC = _ref$options.initialColorMode,\n    initialColorMode = _ref$options$initialC === void 0 ? 'light' : _ref$options$initialC,\n    _ref$options$accessib = _ref$options.accessibleColors,\n    isTextColorAccessible = _ref$options$accessib === void 0 ? false : _ref$options$accessib,\n    useSystemColorMode = _ref$options.useSystemColorMode,\n    colorModeManager = _ref.colorModeManager;\n  var _useModeManager = useModeManager(initialColorMode, useSystemColorMode, colorModeManager),\n    colorMode = _useModeManager.colorMode,\n    setColorMode = _useModeManager.setColorMode;\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n  var _React$useState = React.useState(isTextColorAccessible),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    accessibleColors = _React$useState2[0],\n    setAccessibleColors = _React$useState2[1];\n  var contextValue = useMemo(function () {\n    return {\n      colorMode: {\n        colorMode: colorMode,\n        toggleColorMode: toggleColorMode,\n        setColorMode: setColorMode,\n        accessibleColors: accessibleColors,\n        setAccessibleColors: setAccessibleColors\n      }\n    };\n  }, [colorMode, toggleColorMode, setColorMode, accessibleColors, setAccessibleColors]);\n  React.useEffect(function () {\n    var escapeKeyListener = null;\n    if (Platform.OS === 'web') {\n      escapeKeyListener = function escapeKeyListener(e) {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            var lastHandler = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n    return function () {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n  return React.createElement(HybridContext.Provider, {\n    value: contextValue\n  }, children);\n};\nexport default HybridProvider;","map":{"version":3,"names":["React","useMemo","Platform","HybridContext","useModeManager","keyboardDismissHandlerManager","HybridProvider","_ref","children","_ref$options","options","_ref$options$initialC","initialColorMode","_ref$options$accessib","accessibleColors","isTextColorAccessible","useSystemColorMode","colorModeManager","_useModeManager","colorMode","setColorMode","toggleColorMode","useCallback","_React$useState","useState","_React$useState2","_slicedToArray","setAccessibleColors","contextValue","useEffect","escapeKeyListener","OS","e","key","length","lastHandler","pop","document","addEventListener","removeEventListener","createElement","Provider","value"],"sources":["C:\\Users\\H P\\Desktop\\Daily Bite\\daily-bites\\frontend\\node_modules\\native-base\\lib\\module\\core\\hybrid-overlay\\HybridProvider.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n    useSystemColorMode,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    useSystemColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  const contextValue = useMemo(() => {\n    return {\n      colorMode: {\n        colorMode,\n        toggleColorMode,\n        setColorMode,\n        accessibleColors,\n        setAccessibleColors,\n      },\n    };\n  }, [\n    colorMode,\n    toggleColorMode,\n    setColorMode,\n    accessibleColors,\n    setAccessibleColors,\n  ]);\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider value={contextValue}>\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAAA,OAAAC,QAAA;AAEA,SAASC,aAAT;AACA,SAASC,cAAT;AAEA,SAASC,6BAAT;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAAC,IAAA,EAQW;EAAA,IAP7BC,QADsB,GAAAD,IAAA,CACtBC,QADsB;IAAAC,YAAA,GAAAF,IAAA,CAEtBG,OAAO;IAAAC,qBAAA,GAAAF,YAAA,CACLG,gBAAgB;IAAhBA,gBAAgB,GAAAD,qBAAA,cAAG,OADZ,GAAAA,qBAAA;IAAAE,qBAAA,GAAAJ,YAAA,CAEPK,gBAAgB;IAAEC,qBAAqB,GAAAF,qBAAA,cAAG,KAFnC,GAAAA,qBAAA;IAGPG,kBAAA,GAAAP,YAAA,CAAAO,kBAAA;IAEFC,gBAAA,GAAAV,IAAA,CAAAU,gBAAA;EAGA,IAAAC,eAAA,GAAoCd,cAAc,CAChDQ,gBADgD,EAEhDI,kBAFgD,EAGhDC,gBAHgD,CAAlD;IAAQE,SAAF,GAAAD,eAAA,CAAEC,SAAF;IAAaC,YAAA,GAAAF,eAAA,CAAAE,YAAA;EAMnB,IAAMC,eAAe,GAAGrB,KAAK,CAACsB,WAAN,CAAkB,YAAM;IAC9CF,YAAY,CAACD,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,OAAlC,CAAZ;EACD,CAFuB,EAErB,CAACA,SAAD,EAAYC,YAAZ,CAFqB,CAAxB;EAKA,IAAAG,eAAA,GAAgDvB,KAAK,CAACwB,QAAN,CAC9CT,qBAD8C,CAAhD;IAAAU,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAAOT,gBAAD,GAAAW,gBAAA;IAAmBE,mBAAnB,GAAAF,gBAAA;EAIN,IAAMG,YAAY,GAAG3B,OAAO,CAAC,YAAM;IACjC,OAAO;MACLkB,SAAS,EAAE;QACTA,SADS,EACTA,SADS;QAETE,eAFS,EAETA,eAFS;QAGTD,YAHS,EAGTA,YAHS;QAITN,gBAJS,EAITA,gBAJS;QAKTa,mBAAA,EAAAA;MALS;IADN,CAAP;EASD,CAV2B,EAUzB,CACDR,SADC,EAEDE,eAFC,EAGDD,YAHC,EAIDN,gBAJC,EAKDa,mBALC,CAVyB,CAA5B;EAkBA3B,KAAK,CAAC6B,SAAN,CAAgB,YAAM;IACpB,IAAIC,iBAAsB,GAAG,IAA7B;IAEA,IAAI5B,QAAQ,CAAC6B,EAAT,KAAgB,KAApB,EAA2B;MACzBD,iBAAiB,GAAI,SAAAA,kBAAAE,CAAD,EAAsB;QACxC,IAAIA,CAAC,CAACC,GAAF,KAAU,QAAd,EAAwB;UACtB,IAAI5B,6BAA6B,CAAC6B,MAA9B,KAAyC,CAA7C,EAAgD;YAC9C,IAAMC,WAAgB,GAAG9B,6BAA6B,CAAC+B,GAA9B,EAAzB;YACAD,WAAW;UACZ;QACF;MACF,CAPD;MAQAE,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCR,iBAArC;IACD;IAED,OAAO,YAAM;MACX,IAAI5B,QAAQ,CAAC6B,EAAT,KAAgB,KAApB,EAA2B;QACzBM,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCT,iBAAxC;MACD;IACF,CAJD;EAKD,CApBD,EAoBG,EApBH;EAsBA,OACE9B,KAAA,CAAAwC,aAAA,CAACrC,aAAD,CAAesC,QAAf;IAAwBC,KAAK,EAAEd;EAA/B,GACGpB,QADH,CADF;AAKD,CAtED;AAwEA,eAAeF,cAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}