{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef } from 'react';\nimport RNView from \"react-native-web/dist/exports/View\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar StyledView = makeStyledComponent(RNView);\nexport var View = forwardRef(function (props, ref) {\n  var _usePropsResolution = usePropsResolution('View', props),\n    resolvedProps = Object.assign({}, (_objectDestructuringEmpty(_usePropsResolution), _usePropsResolution));\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(StyledView, _extends({}, resolvedProps, {\n    ref: ref\n  }));\n});","map":{"version":3,"names":["React","forwardRef","RNView","usePropsResolution","makeStyledComponent","useHasResponsiveProps","StyledView","View","props","ref","_usePropsResolution","resolvedProps","Object","assign","_objectDestructuringEmpty","createElement","_extends"],"sources":["C:\\Users\\vinch\\OneDrive\\Desktop\\daily_bites\\frontend\\node_modules\\native-base\\lib\\module\\components\\basic\\View\\View.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { View as RNView } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { IViewProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledView: any = makeStyledComponent(RNView);\n\nexport const View = forwardRef((props: IViewProps, ref: any) => {\n  const { ...resolvedProps } = usePropsResolution('View', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <StyledView {...resolvedProps} ref={ref} />;\n});\n"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAAA,OAAAC,MAAA;AAEA,SAASC,kBAAT;AACA,SAASC,mBAAT;AAEA,SAASC,qBAAT;AAEA,IAAMC,UAAe,GAAGF,mBAAmB,CAACF,MAAD,CAA3C;AAEA,OAAO,IAAMK,IAAI,GAAGN,UAAU,CAAC,UAACO,KAAD,EAAoBC,GAApB,EAAiC;EAC9D,IAAAC,mBAAA,GAA6BP,kBAAkB,CAAC,MAAD,EAASK,KAAT,CAA/C;IAAWG,aAAA,GAAAC,MAAA,CAAAC,MAAA,MAAAC,yBAAA,CAAAJ,mBAAA,GAAAA,mBAAA;EAEX,IAAIL,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OAAOR,KAAA,CAAAe,aAAA,CAACT,UAAD,EAAAU,QAAA,KAAgBL,aAAhB;IAA+BF,GAAG,EAAEA;EAApC,GAAP;AACD,CAP6B,CAAvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}