{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport base from \"./base\";\nimport components from \"./components\";\nimport * as tools from \"./tools\";\nvar config = {\n  useSystemColorMode: false,\n  initialColorMode: 'light',\n  accessibleColors: false\n};\nvar theme = _objectSpread(_objectSpread({}, base), {}, {\n  components: components,\n  config: config\n});\nexport { theme, tools as themeTools };\nexport { getColor } from \"./styled-system\";\nexport * from \"./v33x-theme\";","map":{"version":3,"names":["base","components","tools","config","useSystemColorMode","initialColorMode","accessibleColors","theme","_objectSpread","themeTools","getColor"],"sources":["C:\\Users\\H P\\Desktop\\Daily Bite\\daily-bites\\frontend\\node_modules\\native-base\\lib\\module\\theme\\index.ts"],"sourcesContent":["import base from './base';\nimport components from './components';\nimport * as tools from './tools';\nimport type { StyledProps } from '../theme/types';\n//@ts-ignore\nimport type { ColorModeOptions } from './../core/color-mode/types';\nexport interface ComponentTheme {\n  baseStyle?: ((props: any) => StyledProps) | StyledProps;\n  sizes?: Record<string, ((props: any) => StyledProps) | StyledProps>;\n  variants?: Record<string, ((props: any) => StyledProps) | StyledProps>;\n  defaultProps?: Record<string, any>;\n}\nconst config: ColorModeOptions = {\n  useSystemColorMode: false, // TODO: implement this\n  initialColorMode: 'light',\n  accessibleColors: false,\n};\n\nconst theme = {\n  ...base,\n  components,\n  config,\n};\n\nexport type Theme = typeof theme & { fontConfig: any };\n\nexport interface ICustomTheme {}\n\nexport interface ITheme extends ICustomTheme, Omit<Theme, keyof ICustomTheme> {}\n\nexport { theme, tools as themeTools };\n\nexport { getColor } from './styled-system';\nexport * from './v33x-theme';\n"],"mappings":";;;AAAA,OAAOA,IAAP;AACA,OAAOC,UAAP;AACA,OAAO,KAAKC,KAAZ;AAUA,IAAMC,MAAwB,GAAG;EAC/BC,kBAAkB,EAAE,KADW;EAE/BC,gBAAgB,EAAE,OAFa;EAG/BC,gBAAgB,EAAE;AAHa,CAAjC;AAMA,IAAMC,KAAK,GAAAC,aAAA,CAAAA,aAAA,KACNR,IADS;EAEZC,UAFY,EAEZA,UAFY;EAGZE,MAAA,EAAAA;AAAA,EAHF;AAYA,SAASI,KAAT,EAAgBL,KAAK,IAAIO,UAAzB;AAEA,SAASC,QAAT;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}