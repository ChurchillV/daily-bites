{"ast":null,"code":"import React from 'react';\nimport { SafeAreaProvider, initialWindowMetrics as defaultInitialWindowMetrics } from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme } from \"./../theme\";\nimport HybridProvider from \"./hybrid-overlay/HybridProvider\";\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from \"../components/composites/Toast\";\nimport { defaultConfig, NativeBaseConfigProvider } from \"./NativeBaseContext\";\nimport { useToast } from \"../components/composites/Toast\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { getClosestBreakpoint, platformSpecificSpaceUnits } from \"../theme/tools/utils\";\nimport { ResponsiveQueryProvider } from \"../utils/useResponsiveQuery\";\nvar defaultInitialWindowMetricsBasedOnPlatform = Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: defaultInitialWindowMetrics\n});\nvar NativeBaseProvider = function NativeBaseProvider(props) {\n  var _config$theme, _useWindowDimensions;\n  var colorModeManager = props.colorModeManager,\n    _props$config = props.config,\n    config = _props$config === void 0 ? defaultConfig : _props$config,\n    children = props.children,\n    _props$theme = props.theme,\n    propsTheme = _props$theme === void 0 ? defaultTheme : _props$theme,\n    initialWindowMetrics = props.initialWindowMetrics,\n    isSSR = props.isSSR,\n    disableContrastText = props.disableContrastText;\n  var theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n  var newTheme = React.useMemo(function () {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  var currentBreakpoint = React.useMemo(function () {\n    return getClosestBreakpoint(newTheme.breakpoints, windowWidth);\n  }, [windowWidth, newTheme.breakpoints]);\n  return React.createElement(NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, React.createElement(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, React.createElement(ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, React.createElement(HybridProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, React.createElement(OverlayProvider, {\n    isSSR: true\n  }, React.createElement(ToastProvider, null, React.createElement(InitializeToastRef, null), React.createElement(SSRProvider, null, children)))))));\n};\nvar InitializeToastRef = function InitializeToastRef() {\n  var toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\nexport { NativeBaseProvider };","map":{"version":3,"names":["React","SafeAreaProvider","initialWindowMetrics","defaultInitialWindowMetrics","SSRProvider","theme","defaultTheme","HybridProvider","OverlayProvider","ToastProvider","ToastRef","defaultConfig","NativeBaseConfigProvider","useToast","Platform","useWindowDimensions","getClosestBreakpoint","platformSpecificSpaceUnits","ResponsiveQueryProvider","defaultInitialWindowMetricsBasedOnPlatform","select","web","frame","x","y","width","height","insets","top","left","right","bottom","default","NativeBaseProvider","props","_config$theme","_useWindowDimensions","colorModeManager","_props$config","config","children","_props$theme","propsTheme","isSSR","disableContrastText","newTheme","useMemo","enableRem","windowWidth","currentBreakpoint","breakpoints","createElement","initialMetrics","disableCSSMediaQueries","options","InitializeToastRef","toast","current"],"sources":["C:\\Users\\H P\\Desktop\\Daily Bite\\daily-bites\\frontend\\node_modules\\native-base\\lib\\module\\core\\NativeBaseProvider.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  disableContrastText?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <NativeBaseConfigProvider\n      theme={newTheme}\n      config={config}\n      currentBreakpoint={currentBreakpoint}\n      isSSR={isSSR}\n      disableContrastText={disableContrastText}\n    >\n      <SafeAreaProvider\n        initialMetrics={\n          initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n        }\n      >\n        <ResponsiveQueryProvider disableCSSMediaQueries={!isSSR}>\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider isSSR>\n              <ToastProvider>\n                <InitializeToastRef />\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </ResponsiveQueryProvider>\n      </SafeAreaProvider>\n    </NativeBaseConfigProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}