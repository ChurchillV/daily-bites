{"version":3,"sources":["Popover.tsx"],"names":["React","forwardRef","memo","Popper","mergeRefs","useControllableState","PopoverContext","Box","Backdrop","FocusScope","PresenceTransition","StyleSheet","useId","Overlay","useHasResponsiveProps","uniqueId","ResponsiveQueryContext","usePropsResolution","Popover","onOpen","trigger","onClose","isOpen","isOpenProp","children","defaultIsOpen","initialFocusRef","finalFocusRef","useRNModal","trapFocus","_backdrop","props","ref","_overlay","triggerRef","useRef","mergedRef","setIsOpen","value","defaultValue","onChange","bodyMounted","setBodyMounted","useState","headerMounted","setHeaderMounted","id","responsiveQueryContext","useContext","disableCSSMediaQueries","popoverContentId","headerId","bodyId","handleOpen","useCallback","updatedTrigger","undefined","open","handleClose","opacity","transition","duration","scale","absoluteFill"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Popper } from '../Popper';\nimport type { IPopoverProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useControllableState } from '../../../hooks';\nimport { PopoverContext } from './PopoverContext';\nimport Box from '../../primitives/Box';\nimport Backdrop from '../Backdrop';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from '../Transitions';\nimport { StyleSheet } from 'react-native';\nimport { useId } from '@react-native-aria/utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport uniqueId from 'lodash.uniqueid';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nconst Popover = (\n  {\n    onOpen,\n    trigger,\n    onClose,\n    isOpen: isOpenProp,\n    children,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    useRNModal,\n    trapFocus = true,\n    _backdrop,\n    ...props\n  }: IPopoverProps,\n  ref: any\n) => {\n  const { _overlay } = usePropsResolution('Popover', props);\n\n  const triggerRef = React.useRef(null);\n  const mergedRef = mergeRefs([triggerRef]);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const [bodyMounted, setBodyMounted] = React.useState(false);\n  const [headerMounted, setHeaderMounted] = React.useState(false);\n  let id = uniqueId();\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    id = useId();\n  }\n\n  const popoverContentId = `${id}-content`;\n  const headerId = `${popoverContentId}-header`;\n  const bodyId = `${popoverContentId}-body`;\n\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        'ref': mergedRef,\n        'onPress': handleOpen,\n        'aria-expanded': isOpen ? true : false,\n        'aria-controls': isOpen ? popoverContentId : undefined,\n        'aria-haspopup': true,\n      },\n      { open: isOpen }\n    );\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box ref={ref}>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        useRNModal={useRNModal}\n        {..._overlay}\n      >\n        <PresenceTransition\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1, transition: { duration: 150 } }}\n          exit={{ opacity: 0, scale: 0.95, transition: { duration: 100 } }}\n          visible={isOpen}\n          style={StyleSheet.absoluteFill}\n        >\n          <Popper onClose={handleClose} triggerRef={triggerRef} {...props}>\n            <Backdrop onPress={handleClose} bg=\"transparent\" {..._backdrop} />\n            <PopoverContext.Provider\n              value={{\n                onClose: handleClose,\n                initialFocusRef,\n                finalFocusRef,\n                popoverContentId,\n                bodyId,\n                headerId,\n                headerMounted,\n                bodyMounted,\n                setBodyMounted,\n                setHeaderMounted,\n                isOpen,\n              }}\n            >\n              <FocusScope contain={trapFocus} restoreFocus autoFocus>\n                {children}\n              </FocusScope>\n            </PopoverContext.Provider>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Popover));\n"]}