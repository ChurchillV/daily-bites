{"version":3,"sources":["CheckboxGroup.tsx"],"names":["React","createContext","memo","forwardRef","useMemo","useCheckboxGroupState","useCheckboxGroup","useFormControlContext","Box","useHasResponsiveProps","usePropsResolution","CheckboxGroupContext","CheckboxGroup","size","_checkbox","colorScheme","props","ref","resolvedProps","children","state","groupProps","accessibilityLabel","formControlContext","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,IAA/B,EAAqCC,UAArC,EAAiDC,OAAjD,QAAgE,OAAhE;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,OAAO,MAAMC,oBAAoB,gBAAGV,aAAa,CAC/C,IAD+C,CAA1C;;AAIP,SAASW,aAAT,CACE;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAR;AAAmBC,EAAAA,WAAnB;AAAgC,KAAGC;AAAnC,CADF,EAEEC,GAFF,EAGE;AACA,QAAMC,aAAa,GAAGR,kBAAkB,CAAC,eAAD,EAAkBM,KAAlB,CAAxC;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAeH,KAArB;AACA,QAAMI,KAAK,GAAGf,qBAAqB,CAACW,KAAD,CAAnC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAiBf,gBAAgB,CACrC;AAAE,kBAAcU,KAAK,CAACM,kBAAtB;AAA0C,OAAGN;AAA7C,GADqC,EAErCI,KAFqC,CAAvC;AAIA,QAAMG,kBAAkB,GAAGhB,qBAAqB,EAAhD;AACA,QAAMiB,KAAK,GAAGpB,OAAO,CACnB,OAAO;AACLS,IAAAA,IADK;AAELE,IAAAA,WAFK;AAGL,OAAGD,SAHE;AAIL,OAAGS,kBAJE;AAKLH,IAAAA;AALK,GAAP,CADmB,EAQnB,CAACN,SAAD,EAAYC,WAAZ,EAAyBQ,kBAAzB,EAA6CV,IAA7C,EAAmDO,KAAnD,CARmB,CAArB,CATA,CAoBA;;AACA,MAAIX,qBAAqB,CAAC,EAAE,GAAGO,KAAL;AAAYH,IAAAA,IAAZ;AAAkBE,IAAAA;AAAlB,GAAD,CAAzB,EAA4D;AAC1D,WAAO,IAAP;AACD;;AACD;AAAA;AACE;AACA,wBAAC,oBAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAES;AAAtC,oBACE,oBAAC,GAAD,eAASN,aAAT,EAA4BG,UAA5B,EAA4CL,KAA5C;AAAmD,MAAA,GAAG,EAAEC;AAAxD,QACGE,QADH,CADF;AAFF;AAQD;;AAED,4BAAejB,IAAI,eAACC,UAAU,CAACS,aAAD,CAAX,CAAnB","sourcesContent":["import React, { createContext, memo, forwardRef, useMemo } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { ICheckboxGroupProps, ICheckboxContext } from './types';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const CheckboxGroupContext = createContext<ICheckboxContext | null>(\n  null\n);\n\nfunction CheckboxGroup(\n  { size, _checkbox, colorScheme, ...props }: ICheckboxGroupProps,\n  ref?: any\n) {\n  const resolvedProps = usePropsResolution('CheckboxGroup', props);\n  const { children } = props;\n  const state = useCheckboxGroupState(props);\n  const { groupProps } = useCheckboxGroup(\n    { 'aria-label': props.accessibilityLabel, ...props },\n    state\n  );\n  const formControlContext = useFormControlContext();\n  const value = useMemo(\n    () => ({\n      size,\n      colorScheme,\n      ..._checkbox,\n      ...formControlContext,\n      state,\n    }),\n    [_checkbox, colorScheme, formControlContext, size, state]\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n  return (\n    // @ts-ignore\n    <CheckboxGroupContext.Provider value={value}>\n      <Box {...resolvedProps} {...groupProps} {...props} ref={ref}>\n        {children}\n      </Box>\n    </CheckboxGroupContext.Provider>\n  );\n}\n\nexport default memo(forwardRef(CheckboxGroup));\n"]}