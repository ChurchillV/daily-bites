{"version":3,"sources":["HiddenSSR.tsx"],"names":["React","useTheme","Platform","useColorMode","HiddenSSR","memo","children","props","theme","breakPoints","Object","keys","breakpoints","currentColorMode","from","till","only","colorMode","platform","Array","isArray","includes","OS","display","flag","i","cloneElement"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useTheme } from 'native-base';\nimport { Platform } from 'react-native';\nimport type { IHiddenProps } from './types';\nimport { useColorMode } from '../../../core/color-mode/hooks';\n\nexport const HiddenSSR = React.memo(({ children, ...props }: IHiddenProps) => {\n  const theme = useTheme();\n  const breakPoints = Object.keys(theme.breakpoints);\n  const currentColorMode = useColorMode();\n\n  const { from, till, only, colorMode, platform } = props;\n\n  if (children === null) return null;\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  } else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  const display: any = {};\n\n  if (till) {\n    let flag = false;\n    for (const i in breakPoints) {\n      if (breakPoints[i] === till) {\n        display[breakPoints[i]] = 'flex';\n        flag = true;\n      } else {\n        display[breakPoints[i]] = flag ? 'flex' : 'none';\n      }\n    }\n  }\n\n  if (from) {\n    let flag = false;\n    for (const i in breakPoints) {\n      if (breakPoints[i] === from || flag) {\n        display[breakPoints[i]] = 'none';\n        flag = true;\n      } else {\n        display[breakPoints[i]] = 'flex';\n      }\n    }\n  }\n  if (only) {\n    if (Array.isArray(only)) {\n      for (const i in breakPoints) {\n        if (only.includes(breakPoints[i])) {\n          display[breakPoints[i]] = 'none';\n        } else {\n          display[breakPoints[i]] = 'flex';\n        }\n      }\n    } else {\n      display[only] = 'none';\n    }\n  }\n\n  return React.cloneElement(children, {\n    display: display,\n  });\n});\n"]}