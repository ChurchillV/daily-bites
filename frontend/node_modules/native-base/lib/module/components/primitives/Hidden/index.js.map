{"version":3,"sources":["index.tsx"],"names":["React","memo","usePropsResolution","useBreakpointValue","useTheme","useToken","useColorMode","Platform","useNativeBaseConfig","HiddenSSR","Hidden","isSSR","props","from","till","only","platform","colorMode","children","ignoreProps","breakpoints","currentColorMode","breakpointValueObject","Object","keys","reduce","obj","val","breakpointValue","currentBreakpointValue","fromBreakPointValue","tillBreakPointValue","isSSRProvider","Array","isArray","includes","OS"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { memo } from 'react';\nimport type { IHiddenProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\nimport { useNativeBaseConfig } from '../../../core/NativeBaseContext';\nimport { HiddenSSR } from './HiddenSSR';\nexport function Hidden({ isSSR, ...props }: IHiddenProps) {\n  const {\n    from,\n    till,\n    only,\n    platform,\n    colorMode,\n    children,\n  } = usePropsResolution(\n    'Hidden',\n    props,\n    {},\n    {\n      ignoreProps: ['only', 'platform'],\n    }\n  );\n  const { breakpoints } = useTheme();\n  const currentColorMode = useColorMode();\n\n  const breakpointValueObject = Object.keys(breakpoints).reduce(\n    (obj: any, val: string) => {\n      obj[val] = val;\n      return obj;\n    },\n    {}\n  );\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]);\n  const isSSRProvider = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  if (isSSR && isSSRProvider) return <HiddenSSR {...props} />;\n  //if no prop is passed, it will hide the element wrapped with hidden\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  }\n\n  //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (\n    from &&\n    till &&\n    currentBreakpointValue >= fromBreakPointValue &&\n    currentBreakpointValue < tillBreakPointValue\n  ) {\n    return null;\n  }\n\n  //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n  else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  }\n\n  //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n  else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  }\n\n  //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n  // if only prop is string, hide on that breakpoint to next breakpoint.\n  else if (\n    (Array.isArray(only) && only.includes(breakpointValue)) ||\n    only === breakpointValue\n  ) {\n    return null;\n  }\n  //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n  // if platform prop is string, hide on that platform.\n  else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  }\n  //if colormode prop is valid string, hide on that colormode.\n  else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\n\nexport default memo(Hidden);\nexport type { IHiddenProps };\n"]}